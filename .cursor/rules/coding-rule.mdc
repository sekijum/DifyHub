---
description: 
globs: 
alwaysApply: true
---
#### 1. UI/UXに関するルール
- **常にシンプルで洗練されたUIを実装**する  
  - 無駄な装飾、要素、動きは避ける  
  - 一貫性のあるマージン・パディング・カラー・フォントサイズを使用  
  - 操作の導線は明確に、迷わせないデザインとする

#### 2. コメントに関するルール
- **有益なコメントのみ残す（日本語）**
  - ビジネスロジックの意図や特殊な処理の理由がある箇所のみコメント
  - コメント例: `// 料金が0円の場合は無料表示に変換`
- 以下は禁止：
  - 意味のないコメント（例：`// これは変数です`）
  - 処理内容を逐一説明するような低レベルのコメント
  - 一時的なデバッグ用のコメント（`console.log`含む）

#### 3. 関数名・変数名に関するルール
- **常に意味が明確で目的が伝わる命名にする**
  - `handleSubmitForm`（×）→ `submitContactForm`（○）
  - `data`（×）→ `userProfileData`（○）
- **命名は一貫性を保つ（キャメルケース推奨）**
- 不要な略語やアルファベットの羅列は禁止（例：`cfg`, `usrNm`）

#### 4. UIコードに関する具体的ルール（Vue/Nuxtなど想定）
- `v-if` と `v-show` の使い分けは明確に（性能考慮）
- 長いテンプレート内ロジックは必ずcomputedまたはmethodsに移す
- コンポーネント単位は関心ごとで分割し、肥大化を避ける（SRP: 単一責任原則）
- 入力フォームなどは`v-model`で双方向バインディングし、余計なロジックを避ける

#### 5. デバッグ・ログに関するルール
- `console.log`, `debugger` のような**一時的な開発用コードはすべて削除**
- デバッグが必要な場合は、開発環境判定を明示しログレベルを切り替える仕組みで管理（※ライブラリ使用も可）

#### 6. その他（保守性・拡張性）
- マジックナンバーや文字列の直書きは避け、定数または設定ファイルに分離
- 共通処理は共通モジュール・ユーティリティに切り出す
- 使われていない関数・変数は残さず即削除
